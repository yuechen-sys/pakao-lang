Nonterminals useless in grammar

    constant_expression
    specifier_qualifier_list
    identifier_list
    jump_statement


Terminals unused in grammar

    STRING_LITERAL
    SIZEOF
    PTR_OP
    AND_OP
    OR_OP
    CASE
    DEFAULT
    SWITCH
    WHILE
    DO
    GOTO
    CONTINUE
    BREAK
    RETURN


Rules useless in grammar

   96 constant_expression: conditional_expression

   97 specifier_qualifier_list: type_specifier specifier_qualifier_list
   98                         | type_specifier

   99 identifier_list: IDENTIFIER
  100                | identifier_list ',' IDENTIFIER

  101 jump_statement: GOTO IDENTIFIER ';'
  102               | CONTINUE ';'
  103               | BREAK ';'
  104               | RETURN ';'
  105               | RETURN expression ';'


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | CONSTANT

    3 postfix_expression: primary_expression
    4                   | postfix_expression '[' expression ']'
    5                   | IDENTIFIER '(' ')'
    6                   | IDENTIFIER '(' argument_expression_list ')'
    7                   | postfix_expression INC_OP
    8                   | postfix_expression DEC_OP

    9 argument_expression_list: assignment_expression
   10                         | argument_expression_list ',' assignment_expression

   11 unary_expression: postfix_expression
   12                 | INC_OP unary_expression
   13                 | DEC_OP unary_expression

   14 cast_expression: unary_expression

   15 multiplicative_expression: multiplicative_expression MUL_OP cast_expression
   16                          | multiplicative_expression DIV_OP cast_expression
   17                          | multiplicative_expression MOD_OP cast_expression
   18                          | cast_expression

   19 additive_expression: multiplicative_expression
   20                    | additive_expression ADD_OP multiplicative_expression
   21                    | additive_expression NEG_OP multiplicative_expression

   22 shift_expression: additive_expression
   23                 | shift_expression LEFT_OP additive_expression
   24                 | shift_expression RIGHT_OP additive_expression

   25 relational_expression: shift_expression
   26                      | relational_expression LT_OP shift_expression
   27                      | relational_expression GT_OP shift_expression
   28                      | relational_expression LE_OP shift_expression
   29                      | relational_expression GE_OP shift_expression

   30 equality_expression: relational_expression
   31                    | equality_expression EQ_OP relational_expression
   32                    | equality_expression NE_OP relational_expression

   33 and_expression: equality_expression

   34 exclusive_or_expression: and_expression

   35 inclusive_or_expression: exclusive_or_expression

   36 logical_and_expression: inclusive_or_expression

   37 logical_or_expression: logical_and_expression

   38 conditional_expression: logical_or_expression

   39 assignment_expression: unary_expression assignment_operator assignment_expression
   40                      | conditional_expression

   41 assignment_operator: '='
   42                    | MUL_ASSIGN
   43                    | DIV_ASSIGN
   44                    | MOD_ASSIGN
   45                    | ADD_ASSIGN
   46                    | SUB_ASSIGN
   47                    | LEFT_ASSIGN
   48                    | RIGHT_ASSIGN
   49                    | AND_ASSIGN
   50                    | XOR_ASSIGN
   51                    | OR_ASSIGN

   52 expression: assignment_expression

   53 declaration: type_specifier init_declarator_list

   54 init_declarator_list: init_declarator
   55                     | init_declarator_list ',' init_declarator

   56 init_declarator: declarator '=' conditional_expression
   57                | declarator

   58 type_specifier: VOID
   59               | CHAR
   60               | SHORT
   61               | INT
   62               | LONG
   63               | FLOAT
   64               | DOUBLE
   65               | SIGNED
   66               | UNSIGNED
   67               | TYPE_NAME

   68 declarator: pointer direct_declarator
   69           | direct_declarator

   70 direct_declarator: IDENTIFIER
   71                  | direct_declarator '[' CONSTANT ']'

   72 pointer: '*'
   73        | '*' pointer

   74 func_declarator: IDENTIFIER '(' parameter_list ')'

   75 parameter_list: parameter_declaration
   76               | parameter_list ',' parameter_declaration

   77 parameter_declaration: type_specifier
   78                      | type_specifier declarator

   79 declaration_statement: declaration ';'

   80 expression_statement: expression ';'

   81 selection_statement: IF '(' expression ')' compound_statement
   82                    | IF '(' expression ')' compound_statement ELSE compound_statement

   83 iteration_statement: FOR '(' expression ';' expression ';' ')' compound_statement
   84                    | FOR '(' expression ';' expression ';' expression ')' compound_statement

   85 statement: declaration_statement
   86          | expression_statement
   87          | selection_statement
   88          | iteration_statement

   89 statement_list: statement
   90               | statement_list statement

   91 compound_statement: '{' '}'
   92                   | '{' statement_list '}'

   93 translation_unit: function_definition
   94                 | translation_unit function_definition

   95 function_definition: type_specifier func_declarator compound_statement


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 5 6 74 81 82 83 84
    ')' (41) 5 6 74 81 82 83 84
    '*' (42) 72 73
    ',' (44) 10 55 76
    ';' (59) 79 80 83 84
    '=' (61) 41 56
    '[' (91) 4 71
    ']' (93) 4 71
    '{' (123) 91 92
    '}' (125) 91 92
    error (256)
    IDENTIFIER <string> (258) 1 5 6 70 74
    CONSTANT <string> (259) 2 71
    STRING_LITERAL <string> (260)
    SIZEOF <string> (261)
    PTR_OP <token> (262)
    INC_OP <token> (263) 7 12
    DEC_OP <token> (264) 8 13
    LEFT_OP <token> (265) 23
    RIGHT_OP <token> (266) 24
    LE_OP <token> (267) 28
    GE_OP <token> (268) 29
    EQ_OP <token> (269) 31
    NE_OP <token> (270) 32
    AND_OP <token> (271)
    OR_OP <token> (272)
    MUL_ASSIGN <token> (273) 42
    DIV_ASSIGN <token> (274) 43
    MOD_ASSIGN <token> (275) 44
    ADD_ASSIGN <token> (276) 45
    SUB_ASSIGN <token> (277) 46
    LEFT_ASSIGN <token> (278) 47
    RIGHT_ASSIGN <token> (279) 48
    AND_ASSIGN <token> (280) 49
    XOR_ASSIGN <token> (281) 50
    OR_ASSIGN <token> (282) 51
    TYPE_NAME <token> (283) 67
    NEG_OP <token> (284) 21
    ADD_OP <token> (285) 20
    MUL_OP <token> (286) 15
    DIV_OP <token> (287) 16
    MOD_OP <token> (288) 17
    LT_OP <token> (289) 26
    GT_OP <token> (290) 27
    CHAR <token> (291) 59
    SHORT <token> (292) 60
    INT <token> (293) 61
    LONG <token> (294) 62
    SIGNED <token> (295) 65
    UNSIGNED <token> (296) 66
    FLOAT <token> (297) 63
    DOUBLE <token> (298) 64
    VOID <token> (299) 58
    CASE (300)
    DEFAULT (301)
    IF (302) 81 82
    ELSE (303) 82
    SWITCH (304)
    WHILE (305)
    DO (306)
    FOR (307) 83 84
    GOTO (308)
    CONTINUE (309)
    BREAK (310)
    RETURN (311)


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    primary_expression <expr> (68)
        on left: 1 2
        on right: 3
    postfix_expression <expr> (69)
        on left: 3 4 5 6 7 8
        on right: 4 7 8 11
    argument_expression_list <expr_list> (70)
        on left: 9 10
        on right: 6 10
    unary_expression <expr> (71)
        on left: 11 12 13
        on right: 12 13 14 39
    cast_expression <expr> (72)
        on left: 14
        on right: 15 16 17 18
    multiplicative_expression <expr> (73)
        on left: 15 16 17 18
        on right: 15 16 17 19 20 21
    additive_expression <expr> (74)
        on left: 19 20 21
        on right: 20 21 22 23 24
    shift_expression <expr> (75)
        on left: 22 23 24
        on right: 23 24 25 26 27 28 29
    relational_expression <expr> (76)
        on left: 25 26 27 28 29
        on right: 26 27 28 29 30 31 32
    equality_expression <expr> (77)
        on left: 30 31 32
        on right: 31 32 33
    and_expression <expr> (78)
        on left: 33
        on right: 34
    exclusive_or_expression <expr> (79)
        on left: 34
        on right: 35
    inclusive_or_expression <expr> (80)
        on left: 35
        on right: 36
    logical_and_expression <expr> (81)
        on left: 36
        on right: 37
    logical_or_expression <expr> (82)
        on left: 37
        on right: 38
    conditional_expression <expr> (83)
        on left: 38
        on right: 40 56
    assignment_expression <expr> (84)
        on left: 39 40
        on right: 9 10 39 52
    assignment_operator (85)
        on left: 41 42 43 44 45 46 47 48 49 50 51
        on right: 39
    expression <expr> (86)
        on left: 52
        on right: 4 80 81 82 83 84
    declaration <var_list> (87)
        on left: 53
        on right: 79
    init_declarator_list <var_list> (88)
        on left: 54 55
        on right: 53 55
    init_declarator <var_decl> (89)
        on left: 56 57
        on right: 54 55
    type_specifier <token> (90)
        on left: 58 59 60 61 62 63 64 65 66 67
        on right: 53 77 78 95
    declarator <ident> (91)
        on left: 68 69
        on right: 56 57 78
    direct_declarator <ident> (92)
        on left: 70 71
        on right: 68 69 71
    pointer <pointer_level> (93)
        on left: 72 73
        on right: 68 73
    func_declarator <func_decl> (94)
        on left: 74
        on right: 95
    parameter_list <var_list> (95)
        on left: 75 76
        on right: 74 76
    parameter_declaration <var_decl> (96)
        on left: 77 78
        on right: 75 76
    declaration_statement <stmt> (97)
        on left: 79
        on right: 85
    expression_statement <stmt> (98)
        on left: 80
        on right: 86
    selection_statement <stmt> (99)
        on left: 81 82
        on right: 87
    iteration_statement <stmt> (100)
        on left: 83 84
        on right: 88
    statement <stmt> (101)
        on left: 85 86 87 88
        on right: 89 90
    statement_list <block> (102)
        on left: 89 90
        on right: 90 92
    compound_statement <block> (103)
        on left: 91 92
        on right: 81 82 83 84 95
    translation_unit <func> (104)
        on left: 93 94
        on right: 0 94
    function_definition <func> (105)
        on left: 95
        on right: 93 94


State 0

    0 $accept: . translation_unit $end
   58 type_specifier: . VOID
   59               | . CHAR
   60               | . SHORT
   61               | . INT
   62               | . LONG
   63               | . FLOAT
   64               | . DOUBLE
   65               | . SIGNED
   66               | . UNSIGNED
   67               | . TYPE_NAME
   93 translation_unit: . function_definition
   94                 | . translation_unit function_definition
   95 function_definition: . type_specifier func_declarator compound_statement

    TYPE_NAME  shift, and go to state 1
    CHAR       shift, and go to state 2
    SHORT      shift, and go to state 3
    INT        shift, and go to state 4
    LONG       shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7
    FLOAT      shift, and go to state 8
    DOUBLE     shift, and go to state 9
    VOID       shift, and go to state 10

    type_specifier       go to state 11
    translation_unit     go to state 12
    function_definition  go to state 13


State 1

   67 type_specifier: TYPE_NAME .

    $default  reduce using rule 67 (type_specifier)


State 2

   59 type_specifier: CHAR .

    $default  reduce using rule 59 (type_specifier)


State 3

   60 type_specifier: SHORT .

    $default  reduce using rule 60 (type_specifier)


State 4

   61 type_specifier: INT .

    $default  reduce using rule 61 (type_specifier)


State 5

   62 type_specifier: LONG .

    $default  reduce using rule 62 (type_specifier)


State 6

   65 type_specifier: SIGNED .

    $default  reduce using rule 65 (type_specifier)


State 7

   66 type_specifier: UNSIGNED .

    $default  reduce using rule 66 (type_specifier)


State 8

   63 type_specifier: FLOAT .

    $default  reduce using rule 63 (type_specifier)


State 9

   64 type_specifier: DOUBLE .

    $default  reduce using rule 64 (type_specifier)


State 10

   58 type_specifier: VOID .

    $default  reduce using rule 58 (type_specifier)


State 11

   74 func_declarator: . IDENTIFIER '(' parameter_list ')'
   95 function_definition: type_specifier . func_declarator compound_statement

    IDENTIFIER  shift, and go to state 14

    func_declarator  go to state 15


State 12

    0 $accept: translation_unit . $end
   58 type_specifier: . VOID
   59               | . CHAR
   60               | . SHORT
   61               | . INT
   62               | . LONG
   63               | . FLOAT
   64               | . DOUBLE
   65               | . SIGNED
   66               | . UNSIGNED
   67               | . TYPE_NAME
   94 translation_unit: translation_unit . function_definition
   95 function_definition: . type_specifier func_declarator compound_statement

    $end       shift, and go to state 16
    TYPE_NAME  shift, and go to state 1
    CHAR       shift, and go to state 2
    SHORT      shift, and go to state 3
    INT        shift, and go to state 4
    LONG       shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7
    FLOAT      shift, and go to state 8
    DOUBLE     shift, and go to state 9
    VOID       shift, and go to state 10

    type_specifier       go to state 11
    function_definition  go to state 17


State 13

   93 translation_unit: function_definition .

    $default  reduce using rule 93 (translation_unit)


State 14

   74 func_declarator: IDENTIFIER . '(' parameter_list ')'

    '('  shift, and go to state 18


State 15

   91 compound_statement: . '{' '}'
   92                   | . '{' statement_list '}'
   95 function_definition: type_specifier func_declarator . compound_statement

    '{'  shift, and go to state 19

    compound_statement  go to state 20


State 16

    0 $accept: translation_unit $end .

    $default  accept


State 17

   94 translation_unit: translation_unit function_definition .

    $default  reduce using rule 94 (translation_unit)


State 18

   58 type_specifier: . VOID
   59               | . CHAR
   60               | . SHORT
   61               | . INT
   62               | . LONG
   63               | . FLOAT
   64               | . DOUBLE
   65               | . SIGNED
   66               | . UNSIGNED
   67               | . TYPE_NAME
   74 func_declarator: IDENTIFIER '(' . parameter_list ')'
   75 parameter_list: . parameter_declaration
   76               | . parameter_list ',' parameter_declaration
   77 parameter_declaration: . type_specifier
   78                      | . type_specifier declarator

    TYPE_NAME  shift, and go to state 1
    CHAR       shift, and go to state 2
    SHORT      shift, and go to state 3
    INT        shift, and go to state 4
    LONG       shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7
    FLOAT      shift, and go to state 8
    DOUBLE     shift, and go to state 9
    VOID       shift, and go to state 10

    type_specifier         go to state 21
    parameter_list         go to state 22
    parameter_declaration  go to state 23


State 19

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression
   52 expression: . assignment_expression
   53 declaration: . type_specifier init_declarator_list
   58 type_specifier: . VOID
   59               | . CHAR
   60               | . SHORT
   61               | . INT
   62               | . LONG
   63               | . FLOAT
   64               | . DOUBLE
   65               | . SIGNED
   66               | . UNSIGNED
   67               | . TYPE_NAME
   79 declaration_statement: . declaration ';'
   80 expression_statement: . expression ';'
   81 selection_statement: . IF '(' expression ')' compound_statement
   82                    | . IF '(' expression ')' compound_statement ELSE compound_statement
   83 iteration_statement: . FOR '(' expression ';' expression ';' ')' compound_statement
   84                    | . FOR '(' expression ';' expression ';' expression ')' compound_statement
   85 statement: . declaration_statement
   86          | . expression_statement
   87          | . selection_statement
   88          | . iteration_statement
   89 statement_list: . statement
   90               | . statement_list statement
   91 compound_statement: '{' . '}'
   92                   | '{' . statement_list '}'

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27
    TYPE_NAME   shift, and go to state 1
    CHAR        shift, and go to state 2
    SHORT       shift, and go to state 3
    INT         shift, and go to state 4
    LONG        shift, and go to state 5
    SIGNED      shift, and go to state 6
    UNSIGNED    shift, and go to state 7
    FLOAT       shift, and go to state 8
    DOUBLE      shift, and go to state 9
    VOID        shift, and go to state 10
    IF          shift, and go to state 28
    FOR         shift, and go to state 29
    '}'         shift, and go to state 30

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 46
    expression                 go to state 47
    declaration                go to state 48
    type_specifier             go to state 49
    declaration_statement      go to state 50
    expression_statement       go to state 51
    selection_statement        go to state 52
    iteration_statement        go to state 53
    statement                  go to state 54
    statement_list             go to state 55


State 20

   95 function_definition: type_specifier func_declarator compound_statement .

    $default  reduce using rule 95 (function_definition)


State 21

   68 declarator: . pointer direct_declarator
   69           | . direct_declarator
   70 direct_declarator: . IDENTIFIER
   71                  | . direct_declarator '[' CONSTANT ']'
   72 pointer: . '*'
   73        | . '*' pointer
   77 parameter_declaration: type_specifier .  [')', ',']
   78                      | type_specifier . declarator

    IDENTIFIER  shift, and go to state 56
    '*'         shift, and go to state 57

    $default  reduce using rule 77 (parameter_declaration)

    declarator         go to state 58
    direct_declarator  go to state 59
    pointer            go to state 60


State 22

   74 func_declarator: IDENTIFIER '(' parameter_list . ')'
   76 parameter_list: parameter_list . ',' parameter_declaration

    ')'  shift, and go to state 61
    ','  shift, and go to state 62


State 23

   75 parameter_list: parameter_declaration .

    $default  reduce using rule 75 (parameter_list)


State 24

    1 primary_expression: IDENTIFIER .  [INC_OP, DEC_OP, LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, NEG_OP, ADD_OP, MUL_OP, DIV_OP, MOD_OP, LT_OP, GT_OP, '[', ']', ')', ',', '=', ';']
    5 postfix_expression: IDENTIFIER . '(' ')'
    6                   | IDENTIFIER . '(' argument_expression_list ')'

    '('  shift, and go to state 63

    $default  reduce using rule 1 (primary_expression)


State 25

    2 primary_expression: CONSTANT .

    $default  reduce using rule 2 (primary_expression)


State 26

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   12                 | INC_OP . unary_expression
   13                 | . DEC_OP unary_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression  go to state 31
    postfix_expression  go to state 32
    unary_expression    go to state 64


State 27

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   13                 | DEC_OP . unary_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression  go to state 31
    postfix_expression  go to state 32
    unary_expression    go to state 65


State 28

   81 selection_statement: IF . '(' expression ')' compound_statement
   82                    | IF . '(' expression ')' compound_statement ELSE compound_statement

    '('  shift, and go to state 66


State 29

   83 iteration_statement: FOR . '(' expression ';' expression ';' ')' compound_statement
   84                    | FOR . '(' expression ';' expression ';' expression ')' compound_statement

    '('  shift, and go to state 67


State 30

   91 compound_statement: '{' '}' .

    $default  reduce using rule 91 (compound_statement)


State 31

    3 postfix_expression: primary_expression .

    $default  reduce using rule 3 (postfix_expression)


State 32

    4 postfix_expression: postfix_expression . '[' expression ']'
    7                   | postfix_expression . INC_OP
    8                   | postfix_expression . DEC_OP
   11 unary_expression: postfix_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, NEG_OP, ADD_OP, MUL_OP, DIV_OP, MOD_OP, LT_OP, GT_OP, ']', ')', ',', '=', ';']

    INC_OP  shift, and go to state 68
    DEC_OP  shift, and go to state 69
    '['     shift, and go to state 70

    $default  reduce using rule 11 (unary_expression)


State 33

   14 cast_expression: unary_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, NEG_OP, ADD_OP, MUL_OP, DIV_OP, MOD_OP, LT_OP, GT_OP, ']', ')', ',', ';']
   39 assignment_expression: unary_expression . assignment_operator assignment_expression
   41 assignment_operator: . '='
   42                    | . MUL_ASSIGN
   43                    | . DIV_ASSIGN
   44                    | . MOD_ASSIGN
   45                    | . ADD_ASSIGN
   46                    | . SUB_ASSIGN
   47                    | . LEFT_ASSIGN
   48                    | . RIGHT_ASSIGN
   49                    | . AND_ASSIGN
   50                    | . XOR_ASSIGN
   51                    | . OR_ASSIGN

    MUL_ASSIGN    shift, and go to state 71
    DIV_ASSIGN    shift, and go to state 72
    MOD_ASSIGN    shift, and go to state 73
    ADD_ASSIGN    shift, and go to state 74
    SUB_ASSIGN    shift, and go to state 75
    LEFT_ASSIGN   shift, and go to state 76
    RIGHT_ASSIGN  shift, and go to state 77
    AND_ASSIGN    shift, and go to state 78
    XOR_ASSIGN    shift, and go to state 79
    OR_ASSIGN     shift, and go to state 80
    '='           shift, and go to state 81

    $default  reduce using rule 14 (cast_expression)

    assignment_operator  go to state 82


State 34

   18 multiplicative_expression: cast_expression .

    $default  reduce using rule 18 (multiplicative_expression)


State 35

   15 multiplicative_expression: multiplicative_expression . MUL_OP cast_expression
   16                          | multiplicative_expression . DIV_OP cast_expression
   17                          | multiplicative_expression . MOD_OP cast_expression
   19 additive_expression: multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, NEG_OP, ADD_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    MUL_OP  shift, and go to state 83
    DIV_OP  shift, and go to state 84
    MOD_OP  shift, and go to state 85

    $default  reduce using rule 19 (additive_expression)


State 36

   20 additive_expression: additive_expression . ADD_OP multiplicative_expression
   21                    | additive_expression . NEG_OP multiplicative_expression
   22 shift_expression: additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    NEG_OP  shift, and go to state 86
    ADD_OP  shift, and go to state 87

    $default  reduce using rule 22 (shift_expression)


State 37

   23 shift_expression: shift_expression . LEFT_OP additive_expression
   24                 | shift_expression . RIGHT_OP additive_expression
   25 relational_expression: shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    LEFT_OP   shift, and go to state 88
    RIGHT_OP  shift, and go to state 89

    $default  reduce using rule 25 (relational_expression)


State 38

   26 relational_expression: relational_expression . LT_OP shift_expression
   27                      | relational_expression . GT_OP shift_expression
   28                      | relational_expression . LE_OP shift_expression
   29                      | relational_expression . GE_OP shift_expression
   30 equality_expression: relational_expression .  [EQ_OP, NE_OP, ']', ')', ',', ';']

    LE_OP  shift, and go to state 90
    GE_OP  shift, and go to state 91
    LT_OP  shift, and go to state 92
    GT_OP  shift, and go to state 93

    $default  reduce using rule 30 (equality_expression)


State 39

   31 equality_expression: equality_expression . EQ_OP relational_expression
   32                    | equality_expression . NE_OP relational_expression
   33 and_expression: equality_expression .  [']', ')', ',', ';']

    EQ_OP  shift, and go to state 94
    NE_OP  shift, and go to state 95

    $default  reduce using rule 33 (and_expression)


State 40

   34 exclusive_or_expression: and_expression .

    $default  reduce using rule 34 (exclusive_or_expression)


State 41

   35 inclusive_or_expression: exclusive_or_expression .

    $default  reduce using rule 35 (inclusive_or_expression)


State 42

   36 logical_and_expression: inclusive_or_expression .

    $default  reduce using rule 36 (logical_and_expression)


State 43

   37 logical_or_expression: logical_and_expression .

    $default  reduce using rule 37 (logical_or_expression)


State 44

   38 conditional_expression: logical_or_expression .

    $default  reduce using rule 38 (conditional_expression)


State 45

   40 assignment_expression: conditional_expression .

    $default  reduce using rule 40 (assignment_expression)


State 46

   52 expression: assignment_expression .

    $default  reduce using rule 52 (expression)


State 47

   80 expression_statement: expression . ';'

    ';'  shift, and go to state 96


State 48

   79 declaration_statement: declaration . ';'

    ';'  shift, and go to state 97


State 49

   53 declaration: type_specifier . init_declarator_list
   54 init_declarator_list: . init_declarator
   55                     | . init_declarator_list ',' init_declarator
   56 init_declarator: . declarator '=' conditional_expression
   57                | . declarator
   68 declarator: . pointer direct_declarator
   69           | . direct_declarator
   70 direct_declarator: . IDENTIFIER
   71                  | . direct_declarator '[' CONSTANT ']'
   72 pointer: . '*'
   73        | . '*' pointer

    IDENTIFIER  shift, and go to state 56
    '*'         shift, and go to state 57

    init_declarator_list  go to state 98
    init_declarator       go to state 99
    declarator            go to state 100
    direct_declarator     go to state 59
    pointer               go to state 60


State 50

   85 statement: declaration_statement .

    $default  reduce using rule 85 (statement)


State 51

   86 statement: expression_statement .

    $default  reduce using rule 86 (statement)


State 52

   87 statement: selection_statement .

    $default  reduce using rule 87 (statement)


State 53

   88 statement: iteration_statement .

    $default  reduce using rule 88 (statement)


State 54

   89 statement_list: statement .

    $default  reduce using rule 89 (statement_list)


State 55

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression
   52 expression: . assignment_expression
   53 declaration: . type_specifier init_declarator_list
   58 type_specifier: . VOID
   59               | . CHAR
   60               | . SHORT
   61               | . INT
   62               | . LONG
   63               | . FLOAT
   64               | . DOUBLE
   65               | . SIGNED
   66               | . UNSIGNED
   67               | . TYPE_NAME
   79 declaration_statement: . declaration ';'
   80 expression_statement: . expression ';'
   81 selection_statement: . IF '(' expression ')' compound_statement
   82                    | . IF '(' expression ')' compound_statement ELSE compound_statement
   83 iteration_statement: . FOR '(' expression ';' expression ';' ')' compound_statement
   84                    | . FOR '(' expression ';' expression ';' expression ')' compound_statement
   85 statement: . declaration_statement
   86          | . expression_statement
   87          | . selection_statement
   88          | . iteration_statement
   90 statement_list: statement_list . statement
   92 compound_statement: '{' statement_list . '}'

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27
    TYPE_NAME   shift, and go to state 1
    CHAR        shift, and go to state 2
    SHORT       shift, and go to state 3
    INT         shift, and go to state 4
    LONG        shift, and go to state 5
    SIGNED      shift, and go to state 6
    UNSIGNED    shift, and go to state 7
    FLOAT       shift, and go to state 8
    DOUBLE      shift, and go to state 9
    VOID        shift, and go to state 10
    IF          shift, and go to state 28
    FOR         shift, and go to state 29
    '}'         shift, and go to state 101

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 46
    expression                 go to state 47
    declaration                go to state 48
    type_specifier             go to state 49
    declaration_statement      go to state 50
    expression_statement       go to state 51
    selection_statement        go to state 52
    iteration_statement        go to state 53
    statement                  go to state 102


State 56

   70 direct_declarator: IDENTIFIER .

    $default  reduce using rule 70 (direct_declarator)


State 57

   72 pointer: . '*'
   72        | '*' .  [IDENTIFIER]
   73        | . '*' pointer
   73        | '*' . pointer

    '*'  shift, and go to state 57

    $default  reduce using rule 72 (pointer)

    pointer  go to state 103


State 58

   78 parameter_declaration: type_specifier declarator .

    $default  reduce using rule 78 (parameter_declaration)


State 59

   69 declarator: direct_declarator .  [')', ',', '=', ';']
   71 direct_declarator: direct_declarator . '[' CONSTANT ']'

    '['  shift, and go to state 104

    $default  reduce using rule 69 (declarator)


State 60

   68 declarator: pointer . direct_declarator
   70 direct_declarator: . IDENTIFIER
   71                  | . direct_declarator '[' CONSTANT ']'

    IDENTIFIER  shift, and go to state 56

    direct_declarator  go to state 105


State 61

   74 func_declarator: IDENTIFIER '(' parameter_list ')' .

    $default  reduce using rule 74 (func_declarator)


State 62

   58 type_specifier: . VOID
   59               | . CHAR
   60               | . SHORT
   61               | . INT
   62               | . LONG
   63               | . FLOAT
   64               | . DOUBLE
   65               | . SIGNED
   66               | . UNSIGNED
   67               | . TYPE_NAME
   76 parameter_list: parameter_list ',' . parameter_declaration
   77 parameter_declaration: . type_specifier
   78                      | . type_specifier declarator

    TYPE_NAME  shift, and go to state 1
    CHAR       shift, and go to state 2
    SHORT      shift, and go to state 3
    INT        shift, and go to state 4
    LONG       shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7
    FLOAT      shift, and go to state 8
    DOUBLE     shift, and go to state 9
    VOID       shift, and go to state 10

    type_specifier         go to state 21
    parameter_declaration  go to state 106


State 63

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    5                   | IDENTIFIER '(' . ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    6                   | IDENTIFIER '(' . argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
    9 argument_expression_list: . assignment_expression
   10                         | . argument_expression_list ',' assignment_expression
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27
    ')'         shift, and go to state 107

    primary_expression         go to state 31
    postfix_expression         go to state 32
    argument_expression_list   go to state 108
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 109


State 64

   12 unary_expression: INC_OP unary_expression .

    $default  reduce using rule 12 (unary_expression)


State 65

   13 unary_expression: DEC_OP unary_expression .

    $default  reduce using rule 13 (unary_expression)


State 66

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression
   52 expression: . assignment_expression
   81 selection_statement: IF '(' . expression ')' compound_statement
   82                    | IF '(' . expression ')' compound_statement ELSE compound_statement

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 46
    expression                 go to state 110


State 67

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression
   52 expression: . assignment_expression
   83 iteration_statement: FOR '(' . expression ';' expression ';' ')' compound_statement
   84                    | FOR '(' . expression ';' expression ';' expression ')' compound_statement

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 46
    expression                 go to state 111


State 68

    7 postfix_expression: postfix_expression INC_OP .

    $default  reduce using rule 7 (postfix_expression)


State 69

    8 postfix_expression: postfix_expression DEC_OP .

    $default  reduce using rule 8 (postfix_expression)


State 70

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    4                   | postfix_expression '[' . expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression
   52 expression: . assignment_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 46
    expression                 go to state 112


State 71

   42 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 42 (assignment_operator)


State 72

   43 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 43 (assignment_operator)


State 73

   44 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 44 (assignment_operator)


State 74

   45 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 45 (assignment_operator)


State 75

   46 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 46 (assignment_operator)


State 76

   47 assignment_operator: LEFT_ASSIGN .

    $default  reduce using rule 47 (assignment_operator)


State 77

   48 assignment_operator: RIGHT_ASSIGN .

    $default  reduce using rule 48 (assignment_operator)


State 78

   49 assignment_operator: AND_ASSIGN .

    $default  reduce using rule 49 (assignment_operator)


State 79

   50 assignment_operator: XOR_ASSIGN .

    $default  reduce using rule 50 (assignment_operator)


State 80

   51 assignment_operator: OR_ASSIGN .

    $default  reduce using rule 51 (assignment_operator)


State 81

   41 assignment_operator: '=' .

    $default  reduce using rule 41 (assignment_operator)


State 82

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   39                      | unary_expression assignment_operator . assignment_expression
   40                      | . conditional_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 113


State 83

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: multiplicative_expression MUL_OP . cast_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression  go to state 31
    postfix_expression  go to state 32
    unary_expression    go to state 114
    cast_expression     go to state 115


State 84

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   16 multiplicative_expression: multiplicative_expression DIV_OP . cast_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression  go to state 31
    postfix_expression  go to state 32
    unary_expression    go to state 114
    cast_expression     go to state 116


State 85

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   17 multiplicative_expression: multiplicative_expression MOD_OP . cast_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression  go to state 31
    postfix_expression  go to state 32
    unary_expression    go to state 114
    cast_expression     go to state 117


State 86

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   21 additive_expression: additive_expression NEG_OP . multiplicative_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 118


State 87

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   20 additive_expression: additive_expression ADD_OP . multiplicative_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 119


State 88

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   23 shift_expression: shift_expression LEFT_OP . additive_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 120


State 89

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   24 shift_expression: shift_expression RIGHT_OP . additive_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 121


State 90

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   28 relational_expression: relational_expression LE_OP . shift_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 122


State 91

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   29 relational_expression: relational_expression GE_OP . shift_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 123


State 92

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   26 relational_expression: relational_expression LT_OP . shift_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 124


State 93

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   27 relational_expression: relational_expression GT_OP . shift_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 125


State 94

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   31 equality_expression: equality_expression EQ_OP . relational_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 126


State 95

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   32 equality_expression: equality_expression NE_OP . relational_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 127


State 96

   80 expression_statement: expression ';' .

    $default  reduce using rule 80 (expression_statement)


State 97

   79 declaration_statement: declaration ';' .

    $default  reduce using rule 79 (declaration_statement)


State 98

   53 declaration: type_specifier init_declarator_list .  [';']
   55 init_declarator_list: init_declarator_list . ',' init_declarator

    ','  shift, and go to state 128

    $default  reduce using rule 53 (declaration)


State 99

   54 init_declarator_list: init_declarator .

    $default  reduce using rule 54 (init_declarator_list)


State 100

   56 init_declarator: declarator . '=' conditional_expression
   57                | declarator .  [',', ';']

    '='  shift, and go to state 129

    $default  reduce using rule 57 (init_declarator)


State 101

   92 compound_statement: '{' statement_list '}' .

    $default  reduce using rule 92 (compound_statement)


State 102

   90 statement_list: statement_list statement .

    $default  reduce using rule 90 (statement_list)


State 103

   73 pointer: '*' pointer .

    $default  reduce using rule 73 (pointer)


State 104

   71 direct_declarator: direct_declarator '[' . CONSTANT ']'

    CONSTANT  shift, and go to state 130


State 105

   68 declarator: pointer direct_declarator .  [')', ',', '=', ';']
   71 direct_declarator: direct_declarator . '[' CONSTANT ']'

    '['  shift, and go to state 104

    $default  reduce using rule 68 (declarator)


State 106

   76 parameter_list: parameter_list ',' parameter_declaration .

    $default  reduce using rule 76 (parameter_list)


State 107

    5 postfix_expression: IDENTIFIER '(' ')' .

    $default  reduce using rule 5 (postfix_expression)


State 108

    6 postfix_expression: IDENTIFIER '(' argument_expression_list . ')'
   10 argument_expression_list: argument_expression_list . ',' assignment_expression

    ')'  shift, and go to state 131
    ','  shift, and go to state 132


State 109

    9 argument_expression_list: assignment_expression .

    $default  reduce using rule 9 (argument_expression_list)


State 110

   81 selection_statement: IF '(' expression . ')' compound_statement
   82                    | IF '(' expression . ')' compound_statement ELSE compound_statement

    ')'  shift, and go to state 133


State 111

   83 iteration_statement: FOR '(' expression . ';' expression ';' ')' compound_statement
   84                    | FOR '(' expression . ';' expression ';' expression ')' compound_statement

    ';'  shift, and go to state 134


State 112

    4 postfix_expression: postfix_expression '[' expression . ']'

    ']'  shift, and go to state 135


State 113

   39 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 39 (assignment_expression)


State 114

   14 cast_expression: unary_expression .

    $default  reduce using rule 14 (cast_expression)


State 115

   15 multiplicative_expression: multiplicative_expression MUL_OP cast_expression .

    $default  reduce using rule 15 (multiplicative_expression)


State 116

   16 multiplicative_expression: multiplicative_expression DIV_OP cast_expression .

    $default  reduce using rule 16 (multiplicative_expression)


State 117

   17 multiplicative_expression: multiplicative_expression MOD_OP cast_expression .

    $default  reduce using rule 17 (multiplicative_expression)


State 118

   15 multiplicative_expression: multiplicative_expression . MUL_OP cast_expression
   16                          | multiplicative_expression . DIV_OP cast_expression
   17                          | multiplicative_expression . MOD_OP cast_expression
   21 additive_expression: additive_expression NEG_OP multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, NEG_OP, ADD_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    MUL_OP  shift, and go to state 83
    DIV_OP  shift, and go to state 84
    MOD_OP  shift, and go to state 85

    $default  reduce using rule 21 (additive_expression)


State 119

   15 multiplicative_expression: multiplicative_expression . MUL_OP cast_expression
   16                          | multiplicative_expression . DIV_OP cast_expression
   17                          | multiplicative_expression . MOD_OP cast_expression
   20 additive_expression: additive_expression ADD_OP multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, NEG_OP, ADD_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    MUL_OP  shift, and go to state 83
    DIV_OP  shift, and go to state 84
    MOD_OP  shift, and go to state 85

    $default  reduce using rule 20 (additive_expression)


State 120

   20 additive_expression: additive_expression . ADD_OP multiplicative_expression
   21                    | additive_expression . NEG_OP multiplicative_expression
   23 shift_expression: shift_expression LEFT_OP additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    NEG_OP  shift, and go to state 86
    ADD_OP  shift, and go to state 87

    $default  reduce using rule 23 (shift_expression)


State 121

   20 additive_expression: additive_expression . ADD_OP multiplicative_expression
   21                    | additive_expression . NEG_OP multiplicative_expression
   24 shift_expression: shift_expression RIGHT_OP additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    NEG_OP  shift, and go to state 86
    ADD_OP  shift, and go to state 87

    $default  reduce using rule 24 (shift_expression)


State 122

   23 shift_expression: shift_expression . LEFT_OP additive_expression
   24                 | shift_expression . RIGHT_OP additive_expression
   28 relational_expression: relational_expression LE_OP shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    LEFT_OP   shift, and go to state 88
    RIGHT_OP  shift, and go to state 89

    $default  reduce using rule 28 (relational_expression)


State 123

   23 shift_expression: shift_expression . LEFT_OP additive_expression
   24                 | shift_expression . RIGHT_OP additive_expression
   29 relational_expression: relational_expression GE_OP shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    LEFT_OP   shift, and go to state 88
    RIGHT_OP  shift, and go to state 89

    $default  reduce using rule 29 (relational_expression)


State 124

   23 shift_expression: shift_expression . LEFT_OP additive_expression
   24                 | shift_expression . RIGHT_OP additive_expression
   26 relational_expression: relational_expression LT_OP shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    LEFT_OP   shift, and go to state 88
    RIGHT_OP  shift, and go to state 89

    $default  reduce using rule 26 (relational_expression)


State 125

   23 shift_expression: shift_expression . LEFT_OP additive_expression
   24                 | shift_expression . RIGHT_OP additive_expression
   27 relational_expression: relational_expression GT_OP shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, LT_OP, GT_OP, ']', ')', ',', ';']

    LEFT_OP   shift, and go to state 88
    RIGHT_OP  shift, and go to state 89

    $default  reduce using rule 27 (relational_expression)


State 126

   26 relational_expression: relational_expression . LT_OP shift_expression
   27                      | relational_expression . GT_OP shift_expression
   28                      | relational_expression . LE_OP shift_expression
   29                      | relational_expression . GE_OP shift_expression
   31 equality_expression: equality_expression EQ_OP relational_expression .  [EQ_OP, NE_OP, ']', ')', ',', ';']

    LE_OP  shift, and go to state 90
    GE_OP  shift, and go to state 91
    LT_OP  shift, and go to state 92
    GT_OP  shift, and go to state 93

    $default  reduce using rule 31 (equality_expression)


State 127

   26 relational_expression: relational_expression . LT_OP shift_expression
   27                      | relational_expression . GT_OP shift_expression
   28                      | relational_expression . LE_OP shift_expression
   29                      | relational_expression . GE_OP shift_expression
   32 equality_expression: equality_expression NE_OP relational_expression .  [EQ_OP, NE_OP, ']', ')', ',', ';']

    LE_OP  shift, and go to state 90
    GE_OP  shift, and go to state 91
    LT_OP  shift, and go to state 92
    GT_OP  shift, and go to state 93

    $default  reduce using rule 32 (equality_expression)


State 128

   55 init_declarator_list: init_declarator_list ',' . init_declarator
   56 init_declarator: . declarator '=' conditional_expression
   57                | . declarator
   68 declarator: . pointer direct_declarator
   69           | . direct_declarator
   70 direct_declarator: . IDENTIFIER
   71                  | . direct_declarator '[' CONSTANT ']'
   72 pointer: . '*'
   73        | . '*' pointer

    IDENTIFIER  shift, and go to state 56
    '*'         shift, and go to state 57

    init_declarator    go to state 136
    declarator         go to state 100
    direct_declarator  go to state 59
    pointer            go to state 60


State 129

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   56 init_declarator: declarator '=' . conditional_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 114
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 137


State 130

   71 direct_declarator: direct_declarator '[' CONSTANT . ']'

    ']'  shift, and go to state 138


State 131

    6 postfix_expression: IDENTIFIER '(' argument_expression_list ')' .

    $default  reduce using rule 6 (postfix_expression)


State 132

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   10 argument_expression_list: argument_expression_list ',' . assignment_expression
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 139


State 133

   81 selection_statement: IF '(' expression ')' . compound_statement
   82                    | IF '(' expression ')' . compound_statement ELSE compound_statement
   91 compound_statement: . '{' '}'
   92                   | . '{' statement_list '}'

    '{'  shift, and go to state 19

    compound_statement  go to state 140


State 134

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression
   52 expression: . assignment_expression
   83 iteration_statement: FOR '(' expression ';' . expression ';' ')' compound_statement
   84                    | FOR '(' expression ';' . expression ';' expression ')' compound_statement

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 46
    expression                 go to state 141


State 135

    4 postfix_expression: postfix_expression '[' expression ']' .

    $default  reduce using rule 4 (postfix_expression)


State 136

   55 init_declarator_list: init_declarator_list ',' init_declarator .

    $default  reduce using rule 55 (init_declarator_list)


State 137

   56 init_declarator: declarator '=' conditional_expression .

    $default  reduce using rule 56 (init_declarator)


State 138

   71 direct_declarator: direct_declarator '[' CONSTANT ']' .

    $default  reduce using rule 71 (direct_declarator)


State 139

   10 argument_expression_list: argument_expression_list ',' assignment_expression .

    $default  reduce using rule 10 (argument_expression_list)


State 140

   81 selection_statement: IF '(' expression ')' compound_statement .  [IDENTIFIER, CONSTANT, INC_OP, DEC_OP, TYPE_NAME, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, IF, FOR, '}']
   82                    | IF '(' expression ')' compound_statement . ELSE compound_statement

    ELSE  shift, and go to state 142

    $default  reduce using rule 81 (selection_statement)


State 141

   83 iteration_statement: FOR '(' expression ';' expression . ';' ')' compound_statement
   84                    | FOR '(' expression ';' expression . ';' expression ')' compound_statement

    ';'  shift, and go to state 143


State 142

   82 selection_statement: IF '(' expression ')' compound_statement ELSE . compound_statement
   91 compound_statement: . '{' '}'
   92                   | . '{' statement_list '}'

    '{'  shift, and go to state 19

    compound_statement  go to state 144


State 143

    1 primary_expression: . IDENTIFIER
    2                   | . CONSTANT
    3 postfix_expression: . primary_expression
    4                   | . postfix_expression '[' expression ']'
    5                   | . IDENTIFIER '(' ')'
    6                   | . IDENTIFIER '(' argument_expression_list ')'
    7                   | . postfix_expression INC_OP
    8                   | . postfix_expression DEC_OP
   11 unary_expression: . postfix_expression
   12                 | . INC_OP unary_expression
   13                 | . DEC_OP unary_expression
   14 cast_expression: . unary_expression
   15 multiplicative_expression: . multiplicative_expression MUL_OP cast_expression
   16                          | . multiplicative_expression DIV_OP cast_expression
   17                          | . multiplicative_expression MOD_OP cast_expression
   18                          | . cast_expression
   19 additive_expression: . multiplicative_expression
   20                    | . additive_expression ADD_OP multiplicative_expression
   21                    | . additive_expression NEG_OP multiplicative_expression
   22 shift_expression: . additive_expression
   23                 | . shift_expression LEFT_OP additive_expression
   24                 | . shift_expression RIGHT_OP additive_expression
   25 relational_expression: . shift_expression
   26                      | . relational_expression LT_OP shift_expression
   27                      | . relational_expression GT_OP shift_expression
   28                      | . relational_expression LE_OP shift_expression
   29                      | . relational_expression GE_OP shift_expression
   30 equality_expression: . relational_expression
   31                    | . equality_expression EQ_OP relational_expression
   32                    | . equality_expression NE_OP relational_expression
   33 and_expression: . equality_expression
   34 exclusive_or_expression: . and_expression
   35 inclusive_or_expression: . exclusive_or_expression
   36 logical_and_expression: . inclusive_or_expression
   37 logical_or_expression: . logical_and_expression
   38 conditional_expression: . logical_or_expression
   39 assignment_expression: . unary_expression assignment_operator assignment_expression
   40                      | . conditional_expression
   52 expression: . assignment_expression
   83 iteration_statement: FOR '(' expression ';' expression ';' . ')' compound_statement
   84                    | FOR '(' expression ';' expression ';' . expression ')' compound_statement

    IDENTIFIER  shift, and go to state 24
    CONSTANT    shift, and go to state 25
    INC_OP      shift, and go to state 26
    DEC_OP      shift, and go to state 27
    ')'         shift, and go to state 145

    primary_expression         go to state 31
    postfix_expression         go to state 32
    unary_expression           go to state 33
    cast_expression            go to state 34
    multiplicative_expression  go to state 35
    additive_expression        go to state 36
    shift_expression           go to state 37
    relational_expression      go to state 38
    equality_expression        go to state 39
    and_expression             go to state 40
    exclusive_or_expression    go to state 41
    inclusive_or_expression    go to state 42
    logical_and_expression     go to state 43
    logical_or_expression      go to state 44
    conditional_expression     go to state 45
    assignment_expression      go to state 46
    expression                 go to state 146


State 144

   82 selection_statement: IF '(' expression ')' compound_statement ELSE compound_statement .

    $default  reduce using rule 82 (selection_statement)


State 145

   83 iteration_statement: FOR '(' expression ';' expression ';' ')' . compound_statement
   91 compound_statement: . '{' '}'
   92                   | . '{' statement_list '}'

    '{'  shift, and go to state 19

    compound_statement  go to state 147


State 146

   84 iteration_statement: FOR '(' expression ';' expression ';' expression . ')' compound_statement

    ')'  shift, and go to state 148


State 147

   83 iteration_statement: FOR '(' expression ';' expression ';' ')' compound_statement .

    $default  reduce using rule 83 (iteration_statement)


State 148

   84 iteration_statement: FOR '(' expression ';' expression ';' expression ')' . compound_statement
   91 compound_statement: . '{' '}'
   92                   | . '{' statement_list '}'

    '{'  shift, and go to state 19

    compound_statement  go to state 149


State 149

   84 iteration_statement: FOR '(' expression ';' expression ';' expression ')' compound_statement .

    $default  reduce using rule 84 (iteration_statement)
